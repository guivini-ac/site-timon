version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: timon-cms-postgres
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - timon-cms
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: timon-cms-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - timon-cms
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Console (Optional, can be removed in production)
  minio-console:
    image: minio/minio:latest
    container_name: timon-cms-minio-console
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - timon-cms
    command: server /data --console-address ":9001"

  # Create MinIO bucket automatically
  minio-setup:
    image: minio/mc:latest
    container_name: timon-cms-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - timon-cms
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/app-bucket --ignore-existing;
      /usr/bin/mc anonymous set public myminio/app-bucket;
      exit 0;
      "

  # Backend API (NestJS)
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: development
    container_name: timon-cms-api
    environment:
      NODE_ENV: development
      API_PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@db:5432/app
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: app-bucket
      S3_REGION: us-east-1
      S3_FORCE_PATH_STYLE: true
      JWT_SECRET: super-secret-jwt-key-for-development
    ports:
      - "3001:3000"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    networks:
      - timon-cms
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App (Next.js)
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
    container_name: timon-cms-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: http://localhost:3001
      NEXT_PUBLIC_CDN_BASE_URL: http://localhost:9000/app-bucket
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - timon-cms
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: timon-cms-proxy
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=admin@timon.ma.gov.br"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - timon-cms
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

volumes:
  postgres_data:
  minio_data:
  letsencrypt:

networks:
  timon-cms:
    driver: bridge

# Labels for Traefik routing
# web:
#   labels:
#     - "traefik.enable=true"
#     - "traefik.http.routers.web.rule=Host(`localhost`)"
#     - "traefik.http.routers.web.entrypoints=web"
#     - "traefik.http.services.web.loadbalancer.server.port=3000"
# 
# api:
#   labels:
#     - "traefik.enable=true"  
#     - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api`)"
#     - "traefik.http.routers.api.entrypoints=web"
#     - "traefik.http.services.api.loadbalancer.server.port=3000"
#     - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
#     - "traefik.http.routers.api.middlewares=api-strip"